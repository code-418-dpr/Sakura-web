datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../src/app/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  emailVerified      DateTime?
  image              String?
  password           String
  role               UserRole             @default(USER)
  money              Int
  lastActivity       DateTime
  accounts           Account[]
  DepositTransaction DepositTransaction[]
  Notification       Notification[]
  Messages           ChatMessage[]

  Action Action[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Achievement {
//   id          String @id @default(uuid())
//   title       String
//   image       Bytes? @db.ByteA
//   description String
//   // TODO событие по наступлению которого достижение присваивается пользователю
// }

model DepositTransaction {
  id          String   @id @default(uuid())
  depositTime DateTime
  sum         Int
  source      String

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum NotificationType {
  INFO // Информационные уведомления
  WARNING // Предупреждения
  ERROR // Ошибки
  SUCCESS // Уведомления о успешных действиях
  RESULT // Уведомления о проведенной лотереи
}

model Notification {
  id       String           @id @default(uuid())
  userId   String
  type     NotificationType
  title    String
  content  String
  sendTime DateTime         @default(now())
  isRead   Boolean          @default(false)

  user User @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id          String   @id @default(uuid())
  userId      String
  isResponse  Boolean
  message     String
  receiveTime DateTime

  user User @relation(fields: [userId], references: [id])
}

model Mission {
  id String @id @default(uuid())
}

enum ActionType {
  BUY_TICKET // Купить лотерею
  PARTICIPATE_IN_LOTTERY // Участвовать в лотереи
  GROW_
}

model Action {
  id     String @id @default(uuid())
  userId String

  user User @relation(fields: [userId], references: [id])
}
