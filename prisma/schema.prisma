datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../src/app/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum UserRole {
  ADMIN
  USER
}

model UserLevel {
  id    String @id @default(uuid())
  title String
  score BigInt
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  password       String
  role           UserRole  @default(USER)
  inviterId      String?
  realBalance    BigInt
  virtualBalance BigInt
  score          BigInt
  lastActivity   DateTime

  accounts            Account[]
  tickets             Ticket[]
  depositTransactions DepositTransaction[]
  notifications       Notification[]
  messages            ChatMessage[]
  // actions             Action[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Ticket {
  number    Int    @id @default(autoincrement())
  userId    String
  lotteryId String
  place     Int?   @db.SmallInt
  price     Float

  user    User    @relation(fields: [userId], references: [id])
  lottery Lottery @relation(fields: [lotteryId], references: [id])

  @@unique([number, userId, lotteryId])
}

enum LotteryType {
  REAL
  VIRTUAL
}

model Lottery {
  id                   String      @id @default(uuid())
  title                String
  description          String
  type                 LotteryType
  image                Bytes?      @db.ByteA
  participantsCount    Int
  vipParticipantsCount Int         @db.SmallInt
  winnersCount         Int
  primeWinnersCount    Int         @db.SmallInt
  ticketPrice          Float
  vipDiscount          Int         @db.SmallInt
  start                DateTime
  end                  DateTime
  rules                String

  tickets Ticket[]
  prizes  Prize[]
}

model Prize {
  id           String  @id @default(uuid())
  title        String?
  lotteryId    String
  realPrice    Float
  virtualPrice Float
  count        Int     @db.SmallInt

  lottery Lottery @relation(fields: [lotteryId], references: [id])
}

model DepositTransaction {
  id          String   @id @default(uuid())
  depositTime DateTime
  sum         Int
  source      String

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum NotificationType {
  INFO // Информационные уведомления
  WARNING // Предупреждения
  ERROR // Ошибки
  SUCCESS // Уведомления о успешных действиях
  RESULT // Уведомления о проведенной лотереи
}

model Notification {
  id       String           @id @default(uuid())
  userId   String
  type     NotificationType
  title    String
  content  String
  sendTime DateTime         @default(now())
  isRead   Boolean          @default(false)

  user User @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id          String   @id @default(uuid())
  userId      String
  isResponse  Boolean
  message     String
  receiveTime DateTime

  user User @relation(fields: [userId], references: [id])
}

// model Achievement {
//   id          String @id @default(uuid())
//   title       String
//   image       Bytes? @db.ByteA
//   description String
//   // TODO событие по наступлению которого достижение присваивается пользователю
// }

// model Mission {
//   id String @id @default(uuid())
// }

// enum ActionType {
//   BUY_TICKET // Купить лотерею
//   PARTICIPATE_IN_LOTTERY // Участвовать в лотереи
// }

// model Action {
//   id     String @id @default(uuid())
//   userId String

//   user User @relation(fields: [userId], references: [id])
// }
